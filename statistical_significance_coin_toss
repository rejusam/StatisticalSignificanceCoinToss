{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "900b0e65-a8b9-4ad0-aaa4-1be56b9ca826",
   "metadata": {},
   "source": [
    "# The idea of statistical significance explained simply\n",
    "\n",
    "Once upon a time, in a land where sports events were taken very seriously, there was a young statistician named Alex who was tasked with ensuring the fairness of a coin used in a prominent sporting event. The organizers had received a complaint suggesting that the coin might be biased, favoring one side over the other. Alex knew that this could potentially undermine the integrity of the event, and so she set out to investigate the matter scientifically. In a scientific approach to test the fairness of a coin, Alex followed these steps and explanations:\n",
    "\n",
    "## Testing the Fairness of a Coin\n",
    "\n",
    "### 1. Null Hypothesis and Alternative Hypothesis\n",
    "- Null Hypothesis (H0): The coin is fair, meaning the probability of getting a head or a tail is 0.5 (50-50 chance).\n",
    "- Alternative Hypothesis (H1): The coin is unfair, meaning the probability of getting a head or a tail is not equal to 0.5.\n",
    "\n",
    "*Initial Coin Toss:* When we toss a coin and obtain heads, it raises the question: Does this result necessarily indicate a 50% chance?\n",
    "\n",
    "*Second Coin Toss:* When we proceed to toss the coin a second time and again receive heads, if the chances are 50-50 is there a guarantee to get tail in the second toss? No, because it's important to note that each toss is an independent event. This means that the outcome of the first toss does not influence the outcome of the second toss. Therefore, even if the initial toss resulted in heads (or tails), the probability of getting heads or tails on subsequent tosses remains 50-50.\n",
    "\n",
    "Now, the challenge lies in determining how many consecutive heads must be observed to infer that the coin is unfair, indicating a higher probability of landing heads. Obtaining heads in both tosses does not necessarily indicate that the coin is unfair. The crucial question is: How many consecutive heads must occur before we can reasonably conclude that the coin is biased?\n",
    "\n",
    "### 2. Experimental Design\n",
    "- Ask 100 people to toss the coin 10 times each and record the number of heads obtained.\n",
    "- This provides a sample size of 1000 coin tosses for statistical analysis.\n",
    "\n",
    "### 3. Data Collection and Distribution\n",
    "- Collect the data (number of heads obtained in 10 tosses from each person).\n",
    "- Plot the frequency distribution:\n",
    " - x-axis: Number of heads (ranging from 0 to 10)\n",
    " - y-axis: Frequency or count of people who obtained that number of heads\n",
    "\n",
    "### 4. Expected Distribution under the Null Hypothesis\n",
    "- If the coin is truly fair (H0 is true), the expected distribution of the number of heads should follow a binomial distribution with n = 10 (number of tosses) and p = 0.5 (probability of getting a head).\n",
    "- Calculate or simulate the binomial distribution theoretically or using statistical software/programming languages.\n",
    "\n",
    "### 5. Comparison of Observed and Expected Distributions\n",
    "- Compare the observed frequency distribution (from the experiment) with the expected binomial distribution (under the null hypothesis of a fair coin).\n",
    "- If the observed distribution deviates significantly from the expected distribution, it may provide evidence against the null hypothesis, suggesting that the coin is unfair.\n",
    "\n",
    "### 6. Statistical Significance Testing\n",
    "- Perform a statistical test, such as the chi-square goodness-of-fit test, to quantify the difference between the observed and expected distributions.\n",
    "- Obtain the p-value, which represents the probability of obtaining the observed data (or more extreme data) if the null hypothesis is true.\n",
    "\n",
    "### 7. Decision Criteria\n",
    "- Set a significance level (e.g., $\\alpha$ = 0.05 or 0.01) based on the desired level of confidence.\n",
    "- If the p-value is less than the significance level (Î±), reject the null hypothesis and conclude that the coin is unfair.\n",
    "- If the p-value is greater than the significance level, fail to reject the null hypothesis, and there is no strong evidence to conclude that the coin is unfair.\n",
    "\n",
    "By following this scientific approach, you can objectively evaluate the fairness of the coin based on empirical data and statistical analysis.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "c8e678b7-9278-4c7f-86ab-ec09e76739e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of heads obtained by each person:\n",
      "[5. 2. 3. 7. 5. 6. 4. 4. 5. 6. 4. 5. 8. 7. 6. 5. 4. 5. 9. 4. 4. 5. 8. 6.\n",
      " 4. 3. 4. 5. 7. 7. 3. 3. 7. 6. 7. 2. 4. 2. 3. 7. 3. 8. 3. 5. 3. 6. 4. 5.\n",
      " 5. 4. 4. 5. 3. 4. 5. 6. 8. 6. 5. 3. 6. 5. 6. 6. 7. 8. 4. 4. 7. 4. 5. 5.\n",
      " 6. 3. 3. 7. 5. 5. 4. 6. 5. 4. 4. 4. 5. 1. 4. 5. 6. 6. 4. 4. 7. 5. 7. 6.\n",
      " 6. 7. 4. 3.]\n",
      "\n",
      "Total number of heads obtained in the experiment: 499.0\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def coin_toss():\n",
    "    # Generate a random number between 0 and 1\n",
    "    result = random.random()\n",
    "    \n",
    "    # If the result is less than 0.5, consider it as heads, otherwise tails\n",
    "    if result < 0.5:\n",
    "        return 'Heads'\n",
    "    else:\n",
    "        return 'Tails'\n",
    "\n",
    "# # Perform a coin toss\n",
    "# outcome = coin_toss()\n",
    "# print('The coin toss result is:', outcome)\n",
    "\n",
    "# Initialize an array to store the number of heads obtained by each person\n",
    "heads_count = np.zeros(100)\n",
    "\n",
    "# Simulate the coin toss experiment for 100 people tossing the coin 10 times each\n",
    "for person in range(100):\n",
    "    heads = 0\n",
    "    for toss in range(10):\n",
    "        outcome = coin_toss()\n",
    "        if outcome == 'Heads':\n",
    "            heads += 1\n",
    "    heads_count[person] = heads\n",
    "\n",
    "# Print the number of heads obtained by each person\n",
    "print('Number of heads obtained by each person:')\n",
    "print(heads_count)\n",
    "\n",
    "# Calculate the total number of heads obtained in the experiment\n",
    "total_heads = np.sum(heads_count)\n",
    "print('\\nTotal number of heads obtained in the experiment:', total_heads)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc51b635-f988-4c3e-a047-c65e9ef120b8",
   "metadata": {},
   "source": [
    "#### Simulate the coin toss experiment for 100 people tossing the coin 10 times each"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b9f66389-a2db-4ec5-abb7-dca1d0e54742",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simulate the coin toss experiment for 100 people tossing the coin 10 times each\n",
    "heads_count = np.zeros(100)\n",
    "for person in range(100):\n",
    "    heads = 0\n",
    "    for toss in range(10):\n",
    "        outcome = coin_toss()\n",
    "        if outcome == 'Heads':\n",
    "            heads += 1\n",
    "    heads_count[person] = heads\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a2b89343-2861-4f95-b8eb-4bd3a47a803d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Heads   |   Count\n",
      "---------------------------\n",
      "       1.0        |   1  \n",
      "       2.0        |   2  \n",
      "       3.0        |  12  \n",
      "       4.0        |  17  \n",
      "       5.0        |  27  \n",
      "       6.0        |  22  \n",
      "       7.0        |  13  \n",
      "       8.0        |   6  \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the unique values (number of heads) and their normalized counts\n",
    "unique_values, counts = np.unique(heads_count, return_counts=True)\n",
    "#count_normalised = counts / counts.sum()\n",
    "\n",
    "# Print the unique values and their counts with meaningful labeling\n",
    "print('Number of Heads   |   Count')\n",
    "print('---------------------------')\n",
    "for val, cnt in zip(unique_values, counts):\n",
    "    print(f'{val:^17} | {cnt:^5}')\n",
    "\n",
    "# Plot the frequency distribution using .bar()\n",
    "plt.bar(x=unique_values, height=counts, color='orange', edgecolor='black', alpha=0.8, width=0.8,\n",
    "        label=f'Number of Heads Distribution')\n",
    "plt.xlabel('Number of Heads')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Frequency Distribution of Number of Heads in 10 Tosses')\n",
    "#plt.legend()\n",
    "\n",
    "# Set x-axis ticks to all unique values\n",
    "plt.xticks(unique_values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "5b85ff7e-a4f1-43f9-bd1b-da453e285a8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean: 5.15\n",
      "Deviation: [-1.15 -1.15 -1.15  0.85  2.85 -0.15  0.85  0.85  2.85 -0.15 -1.15 -0.15\n",
      "  0.85  1.85 -1.15  1.85 -0.15 -1.15  0.85  0.85 -0.15 -0.15 -0.15 -0.15\n",
      " -0.15  1.85 -0.15  1.85 -0.15 -1.15  0.85 -2.15 -1.15  0.85  1.85  2.85\n",
      " -0.15 -1.15 -2.15  0.85  0.85 -0.15  2.85 -0.15  0.85 -2.15 -0.15 -2.15\n",
      " -0.15  1.85 -2.15 -2.15 -1.15  0.85 -0.15 -0.15 -0.15 -0.15  0.85 -0.15\n",
      "  1.85  0.85 -0.15 -2.15  1.85  2.85  1.85  1.85 -1.15  1.85  0.85 -2.15\n",
      " -1.15 -2.15  0.85 -1.15 -4.15 -2.15  0.85  1.85 -1.15 -0.15  0.85  2.85\n",
      " -1.15  0.85 -0.15  0.85 -1.15  1.85 -0.15 -2.15 -1.15  0.85 -3.15 -3.15\n",
      " -0.15  0.85 -2.15 -0.15]\n",
      "Variance: 2.25\n",
      "Standard Deviation: 1.50\n"
     ]
    }
   ],
   "source": [
    "# Calculate the mean of the distribution\n",
    "mean = np.mean(heads_count)\n",
    "\n",
    "# Calculate the deviation of each data point from the mean\n",
    "deviations = heads_count - mean\n",
    "\n",
    "# Calculate the squared differences\n",
    "squared_diff = deviations ** 2\n",
    "\n",
    "# Calculate the variance (mean of squared differences)\n",
    "variance = np.mean(squared_diff)\n",
    "\n",
    "# Calculate the standard deviation (square root of variance)\n",
    "std_deviation = np.sqrt(variance)\n",
    "\n",
    "print(f'Mean: {mean:.2f}')\n",
    "print(f'Deviation: {deviations}')\n",
    "print(f'Variance: {variance:.2f}')\n",
    "print(f'Standard Deviation: {std_deviation:.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3856293f-2a69-4773-a3fe-b156a67f3d98",
   "metadata": {},
   "source": [
    "#### Now, from mathematical classes, we know how to calculate the probability of getting one head when tossing the coin 10 times, as well as the probability of getting two heads when tossing it 10 times and so on. desired number of heads.\r\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e678f28-f744-4848-bf3b-0ace93b0a1ed",
   "metadata": {},
   "source": [
    "To calculate the probabilities of getting a certain number of heads when tossing a coin 10 times, you can use the binomial probability formula. The formula is:\n",
    "$$\n",
    "P(X = k) = \\binom{n}{k} \\cdot p^k \\cdot (1 - p)^{n - k} \n",
    "$$\n",
    "Where:\n",
    "\n",
    "- $ P(X = k) $ is the probability of getting exactly k heads.\n",
    "- $ n $ is the total number of trials (in this case, 10 tosses).\n",
    "- $ k $ is the number of successful outcomes (heads in this case).\n",
    "- $ p $ is the probability of success on a single trial (0.5 for a fair coin).\n",
    "\n",
    "\n",
    "Let's calculate the probabilities for getting 1 head, 2 heads, and so on up to 10 heads in 10 tosses:\n",
    "\n",
    "1. Probability of getting 1 head:\n",
    "   $ P(X = 1) = \\binom{10}{1} \\cdot 0.5^1 \\cdot 0.5^{10 - 1} $\n",
    "   \n",
    "   $ P(X = 1) = 10 \\cdot 0.5 \\cdot 0.5^9 $\n",
    "   \n",
    "   $ P(X = 1) = 10 \\cdot 0.5^{10} $\n",
    "   \n",
    "   $ P(X = 1) = 0.00977 \\text{ or } 0.977\\% $\n",
    "\n",
    "2. Probability of getting 2 heads:\n",
    "  $ P(X = 2) = \\binom{10}{2} \\cdot 0.5^2 \\cdot 0.5^{10 - 2}$\n",
    "\n",
    "   $ P(X = 2) = 45 \\cdot 0.25 \\cdot 0.5^8 $\n",
    "   \n",
    "   $ P(X = 2) = 45 \\cdot 0.25 \\cdot 0.00391 $\n",
    "   \n",
    "   $ P(X = 2) = 0.04395 \\text{ or } 4.395\\% $\n",
    "\n",
    "\n",
    "3. Probability of getting 3 heads:\n",
    "    $ P(X = 3) = 0.12085 \\text{ or } 12.085\\%  $\n",
    "    \n",
    "4. Probability of getting 4 heads:\n",
    "     $ P(X = 4) = 0.20063 \\text{ or } 20.063\\%  $\n",
    "    \n",
    "5. Probability of getting 5 heads:\n",
    "     $ P(X = 5) = 0.24609 \\text{ or } 24.609\\%  $\n",
    "    \n",
    "6. Probability of getting 6 heads:\n",
    "     $ P(X = 6) = 0.20508 \\text{ or } 20.508\\%  $\n",
    "    \n",
    "7. Probability of getting 7 heads:\n",
    "    $ P(X = 7) = 0.11133 \\text{ or } 11.133\\%  $\n",
    "    \n",
    "8. Probability of getting 8 heads:\n",
    "     $ P(X = 8) = 0.03809 \\text{ or } 3.809\\%  $\n",
    "\n",
    "9. Probability of getting 9 heads:\n",
    "     $ P(X = 9) = 0.00781 \\text{ or } 0.781\\%  $\n",
    "    \n",
    "10. Probability of getting 10 heads:\n",
    "     $ P(X = 10) = 0.00098 \\text{ or } 0.098\\%  $\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f6d44a0-6b0e-4e2b-9555-89c1df0515ca",
   "metadata": {},
   "source": [
    "### Now that we know the probability, we need to establish a threshold. When we toss a coin 10 times, if we obtain heads more than a certain number of times, we can conclude that the coin is unfair."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1261f417-2c47-46f8-8a9b-d08c361e19c0",
   "metadata": {},
   "source": [
    "## Overplot the theoretical binomial distribution on the experimental data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "134ee735-81b1-4f3a-a866-398a4cccf357",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the unique values (number of heads) and their normalized counts\n",
    "unique_values, counts = np.unique(heads_count, return_counts=True)\n",
    "count_normalised = counts / counts.sum()\n",
    "\n",
    "# Plot the frequency distribution using .bar()\n",
    "plt.bar(x=unique_values, height=count_normalised, color='orange', edgecolor='black', alpha=0.8, width=0.8, label=f'Number of Heads')\n",
    "\n",
    "# Calculate the theoretical probabilities using the binomial distribution formula\n",
    "n = 10  # number of trials (coin tosses)\n",
    "p = 0.5  # probability of success (heads)\n",
    "\n",
    "# Create a binomial distribution object\n",
    "binomial_dist = binom(n, p)\n",
    "\n",
    "# Calculate the probabilities for each k value\n",
    "k_values = np.arange(0, n+1)\n",
    "probabilities = binomial_dist.pmf(k_values)\n",
    "\n",
    "# Overplot the theoretical probabilities\n",
    "plt.plot(k_values, probabilities, marker='*', linestyle='None', color='blue', label='Theoretical Binomial Dist')\n",
    "\n",
    "plt.xlabel('Number of Heads')\n",
    "plt.ylabel('Probability')\n",
    "plt.title('Experimental vs Theoretical Binomial Distribution of Number of Heads in 10 Tosses')\n",
    "plt.legend()\n",
    "plt.xticks(k_values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e24a9600-5b23-446a-bcab-5e1896491a5b",
   "metadata": {},
   "source": [
    "#### To test the fairness of a coin (whether it's biased towards heads or tails), you can perform a hypothesis test using the binomial distribution. In this case, we'll use a significance level (p-value) of 5% to determine whether the coin is fair or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "62e8e84a-965e-4495-b89c-8a8d9898498a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Heads: 515\n",
      "p-value: 0.3591\n",
      "The coin is statistically fair.\n"
     ]
    }
   ],
   "source": [
    "# Calculate the total number of tosses\n",
    "n_tosses = 100 * 10\n",
    "\n",
    "# Calculate the p-value for the fairness of the coin\n",
    "n = n_tosses  # number of trials (coin tosses)\n",
    "p = 0.5  # expected probability of success (fair coin)\n",
    "k = int(np.sum(heads_count))  # observed number of successes (heads)\n",
    "p_value = 2 * min(binom.cdf(k, n, p), 1 - binom.cdf(k - 1, n, p))\n",
    "\n",
    "# Print the results\n",
    "print(f'Number of Heads: {k}')\n",
    "print(f'p-value: {p_value:.4f}')\n",
    "\n",
    "if p_value < 0.05:\n",
    "    print('The coin is statistically biased (not fair).')\n",
    "else:\n",
    "    print('The coin is statistically fair.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e99b7ed-b5ec-46f8-8d6b-cbcfa9133f28",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
